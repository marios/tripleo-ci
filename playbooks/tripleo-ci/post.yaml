- name: Write console log to localhost as fact zuul_console_json
  hosts: localhost
  tasks:
    - name: capture console log json as fact
      set_fact:
        zuul_console_json: "{{ lookup('file', zuul.executor.log_root + '/job-output.json') }}"

- name: Collect logs
  hosts: primary
  tasks:
    - name: Copy zuul_console_json log to workspace for reproducer
      copy:
        content: "{{ hostvars['localhost'].zuul_console_json }}"
        dest: "{{ ansible_user_dir }}/workspace/logs/zuul_console.json"

    - name: Check for artifacts created by a previous collect_logs
      stat:
        path: "{{ ansible_user_dir  }}/workspace/logs/undercloud"
      register: undercloud_logs

    # Collect logs in ovb needs to run before te broker deletes the overcloud nodes.
    # if a timeout happens, collect logs will not run, overcloud nodes will get deleted
    # and we'll not even get undercloud logs
    # Check if we have and undercloud dir in logs. If not, launch collect logs.
    # TODO(gcerami) find a way to run collect logs before te broker deletes the env in
    # case of timeout.
    - name: Remark of collect logs running before post in ovb
      debug:
        msg: "OVB job collect logs already run, not running collect_logs in post"
      when: environment_type == "ovb" and undercloud_logs.stat.exists

    - name: Run ansible playbook to collect logs for non-ovb jobs, or ovb jobs that weren't able to run collect logs
      shell: |
        if [[ -e {{ ansible_user_dir }}/workspace/logs/collect_logs.sh ]]; then
          bash {{ ansible_user_dir }}/workspace/logs/collect_logs.sh
        fi
      when: environment_type != "ovb" or not undercloud_logs.stat.exists


- hosts:
    - primary
    - centos-7
  tasks:

    - name: Ensure artifacts directory exists
      file:
        path: '{{ zuul.executor.work_root }}/artifacts'
        state: directory
      delegate_to: localhost

    - name: Copy files from {{ ansible_user_dir }}/workspace/ on node
      no_log: true
      failed_when: false
      synchronize:
        src: '{{ ansible_user_dir }}/workspace/'
        dest: '{{ zuul.executor.log_root }}'
        mode: pull
        copy_links: true
        verify_host: true
        rsync_opts:
          - --include=/logs/**
          - --include=*/
          - --exclude=*
          - --prune-empty-dirs
